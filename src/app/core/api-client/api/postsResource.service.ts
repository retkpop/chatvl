/**
 * ApiGateway API
 * ApiGateway API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { PostDTO } from '../model/postDTO';
import { Posts } from '../model/posts';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PostsResourceService {

    protected basePath = 'https://192.168.1.12:9090';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createPosts
     * 
     * @param posts posts
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createPostsUsingPOST(posts: PostDTO, observe?: 'body', reportProgress?: boolean): Observable<Posts>;
    public createPostsUsingPOST(posts: PostDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Posts>>;
    public createPostsUsingPOST(posts: PostDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Posts>>;
    public createPostsUsingPOST(posts: PostDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (posts === null || posts === undefined) {
            throw new Error('Required parameter posts was null or undefined when calling createPostsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Posts>(`${this.basePath}/api/posts/add-video`,
            posts,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createPosts
     * 
     * @param posts posts
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createPostsUsingPOST1(posts: Posts, observe?: 'body', reportProgress?: boolean): Observable<Posts>;
    public createPostsUsingPOST1(posts: Posts, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Posts>>;
    public createPostsUsingPOST1(posts: Posts, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Posts>>;
    public createPostsUsingPOST1(posts: Posts, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (posts === null || posts === undefined) {
            throw new Error('Required parameter posts was null or undefined when calling createPostsUsingPOST1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Posts>(`${this.basePath}/api/posts`,
            posts,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deletePosts
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePostsUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deletePostsUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deletePostsUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deletePostsUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deletePostsUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/posts/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllPosts
     * 
     * @param eagerload eagerload
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllPostsUsingGET(eagerload?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<Posts>>;
    public getAllPostsUsingGET(eagerload?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Posts>>>;
    public getAllPostsUsingGET(eagerload?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Posts>>>;
    public getAllPostsUsingGET(eagerload?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (eagerload !== undefined && eagerload !== null) {
            queryParameters = queryParameters.set('eagerload', <any>eagerload);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Posts>>(`${this.basePath}/api/posts`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getListVideoViewed
     * 
     * @param listId listId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getListVideoViewedUsingPOST(listId: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<Array<Posts>>;
    public getListVideoViewedUsingPOST(listId: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Posts>>>;
    public getListVideoViewedUsingPOST(listId: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Posts>>>;
    public getListVideoViewedUsingPOST(listId: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling getListVideoViewedUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<Posts>>(`${this.basePath}/api/posts/video-viewed`,
            listId,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPostsCustom
     * 
     * @param limit limit
     * @param type type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPostsCustomUsingGET(limit: number, type: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Posts>>;
    public getPostsCustomUsingGET(limit: number, type: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Posts>>>;
    public getPostsCustomUsingGET(limit: number, type: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Posts>>>;
    public getPostsCustomUsingGET(limit: number, type: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling getPostsCustomUsingGET.');
        }

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getPostsCustomUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Posts>>(`${this.basePath}/api/posts/get-post-custom/${encodeURIComponent(String(type))}/${encodeURIComponent(String(limit))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPosts
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPostsUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<Posts>;
    public getPostsUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Posts>>;
    public getPostsUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Posts>>;
    public getPostsUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPostsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Posts>(`${this.basePath}/api/posts/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPosts
     * 
     * @param link link
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPostsUsingPOST(link: string, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: any; }>;
    public getPostsUsingPOST(link: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: any; }>>;
    public getPostsUsingPOST(link: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: any; }>>;
    public getPostsUsingPOST(link: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (link === null || link === undefined) {
            throw new Error('Required parameter link was null or undefined when calling getPostsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<{ [key: string]: any; }>(`${this.basePath}/api/posts/check-link`,
            link,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getVideoBySlug
     * 
     * @param slug slug
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVideoBySlugUsingGET(slug: string, observe?: 'body', reportProgress?: boolean): Observable<Posts>;
    public getVideoBySlugUsingGET(slug: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Posts>>;
    public getVideoBySlugUsingGET(slug: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Posts>>;
    public getVideoBySlugUsingGET(slug: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (slug === null || slug === undefined) {
            throw new Error('Required parameter slug was null or undefined when calling getVideoBySlugUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Posts>(`${this.basePath}/api/posts/get-video-by-slug/${encodeURIComponent(String(slug))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getVideoPopular
     * 
     * @param page page
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVideoPopularUsingGET(page: number, size: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Posts>>;
    public getVideoPopularUsingGET(page: number, size: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Posts>>>;
    public getVideoPopularUsingGET(page: number, size: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Posts>>>;
    public getVideoPopularUsingGET(page: number, size: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getVideoPopularUsingGET.');
        }

        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getVideoPopularUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Posts>>(`${this.basePath}/api/posts/get-video-popular/${encodeURIComponent(String(page))}/${encodeURIComponent(String(size))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getVideoSubscribes
     * 
     * @param page page
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVideoSubscribesUsingGET(page: number, size: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Posts>>;
    public getVideoSubscribesUsingGET(page: number, size: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Posts>>>;
    public getVideoSubscribesUsingGET(page: number, size: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Posts>>>;
    public getVideoSubscribesUsingGET(page: number, size: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getVideoSubscribesUsingGET.');
        }

        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getVideoSubscribesUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Posts>>(`${this.basePath}/api/posts/get-video-subscribes/${encodeURIComponent(String(page))}/${encodeURIComponent(String(size))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updatePosts
     * 
     * @param posts posts
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updatePostsUsingPUT(posts: Posts, observe?: 'body', reportProgress?: boolean): Observable<Posts>;
    public updatePostsUsingPUT(posts: Posts, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Posts>>;
    public updatePostsUsingPUT(posts: Posts, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Posts>>;
    public updatePostsUsingPUT(posts: Posts, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (posts === null || posts === undefined) {
            throw new Error('Required parameter posts was null or undefined when calling updatePostsUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Posts>(`${this.basePath}/api/posts`,
            posts,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateViewPost
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateViewPostUsingPOST(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateViewPostUsingPOST(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateViewPostUsingPOST(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateViewPostUsingPOST(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateViewPostUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/posts/add-view-post`,
            id,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
