/**
 * ApiGateway API
 * ApiGateway API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CategoriesCustomDTO } from '../model/categoriesCustomDTO';
import { OptionalOfSuggestions } from '../model/optionalOfSuggestions';
import { Suggestions } from '../model/suggestions';
import { SuggestionsDTO } from '../model/suggestionsDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SuggestionsResourceService {

    protected basePath = 'http://localhost:9090';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createSuggestions
     * 
     * @param suggestions suggestions
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createSuggestionsUsingPOST(suggestions: Suggestions, observe?: 'body', reportProgress?: boolean): Observable<Suggestions>;
    public createSuggestionsUsingPOST(suggestions: Suggestions, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Suggestions>>;
    public createSuggestionsUsingPOST(suggestions: Suggestions, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Suggestions>>;
    public createSuggestionsUsingPOST(suggestions: Suggestions, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (suggestions === null || suggestions === undefined) {
            throw new Error('Required parameter suggestions was null or undefined when calling createSuggestionsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Suggestions>(`${this.basePath}/api/suggestions`,
            suggestions,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteSuggestions
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSuggestionsUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSuggestionsUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSuggestionsUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSuggestionsUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteSuggestionsUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/suggestions/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllSuggestionsCustom
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllSuggestionsCustomUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<CategoriesCustomDTO>>;
    public getAllSuggestionsCustomUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CategoriesCustomDTO>>>;
    public getAllSuggestionsCustomUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CategoriesCustomDTO>>>;
    public getAllSuggestionsCustomUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CategoriesCustomDTO>>(`${this.basePath}/api/suggestions-custom`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllSuggestions
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllSuggestionsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Suggestions>>;
    public getAllSuggestionsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Suggestions>>>;
    public getAllSuggestionsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Suggestions>>>;
    public getAllSuggestionsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Suggestions>>(`${this.basePath}/api/suggestions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSuggestionBySlug
     * 
     * @param slug slug
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSuggestionBySlugUsingGET(slug: string, observe?: 'body', reportProgress?: boolean): Observable<Suggestions>;
    public getSuggestionBySlugUsingGET(slug: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Suggestions>>;
    public getSuggestionBySlugUsingGET(slug: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Suggestions>>;
    public getSuggestionBySlugUsingGET(slug: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (slug === null || slug === undefined) {
            throw new Error('Required parameter slug was null or undefined when calling getSuggestionBySlugUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Suggestions>(`${this.basePath}/api/suggestions/get-suggestion-by-slug/${encodeURIComponent(String(slug))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSuggestionsCustom
     * 
     * @param limit limit
     * @param page page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSuggestionsCustomUsingGET(limit: number, page: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Suggestions>>;
    public getSuggestionsCustomUsingGET(limit: number, page: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Suggestions>>>;
    public getSuggestionsCustomUsingGET(limit: number, page: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Suggestions>>>;
    public getSuggestionsCustomUsingGET(limit: number, page: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling getSuggestionsCustomUsingGET.');
        }

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getSuggestionsCustomUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Suggestions>>(`${this.basePath}/api/suggestions/get-suggestions-custom/${encodeURIComponent(String(page))}/${encodeURIComponent(String(limit))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSuggestions
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSuggestionsUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<Suggestions>;
    public getSuggestionsUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Suggestions>>;
    public getSuggestionsUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Suggestions>>;
    public getSuggestionsUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSuggestionsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Suggestions>(`${this.basePath}/api/suggestions/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateAddSuggestions
     * 
     * @param suggestionss suggestionss
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAddSuggestionsUsingPOST(suggestionss: SuggestionsDTO, observe?: 'body', reportProgress?: boolean): Observable<OptionalOfSuggestions>;
    public updateAddSuggestionsUsingPOST(suggestionss: SuggestionsDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OptionalOfSuggestions>>;
    public updateAddSuggestionsUsingPOST(suggestionss: SuggestionsDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OptionalOfSuggestions>>;
    public updateAddSuggestionsUsingPOST(suggestionss: SuggestionsDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (suggestionss === null || suggestionss === undefined) {
            throw new Error('Required parameter suggestionss was null or undefined when calling updateAddSuggestionsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<OptionalOfSuggestions>(`${this.basePath}/api/suggestions/new`,
            suggestionss,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateSuggestions
     * 
     * @param suggestions suggestions
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSuggestionsUsingPUT(suggestions: Suggestions, observe?: 'body', reportProgress?: boolean): Observable<Suggestions>;
    public updateSuggestionsUsingPUT(suggestions: Suggestions, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Suggestions>>;
    public updateSuggestionsUsingPUT(suggestions: Suggestions, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Suggestions>>;
    public updateSuggestionsUsingPUT(suggestions: Suggestions, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (suggestions === null || suggestions === undefined) {
            throw new Error('Required parameter suggestions was null or undefined when calling updateSuggestionsUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Suggestions>(`${this.basePath}/api/suggestions`,
            suggestions,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
